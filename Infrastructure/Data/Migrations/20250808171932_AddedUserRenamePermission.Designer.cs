// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250808171932_AddedUserRenamePermission")]
    partial class AddedUserRenamePermission
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "pg_trgm");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CategoryRevision", b =>
                {
                    b.Property<string>("CategoriesId")
                        .HasColumnType("character varying(512)");

                    b.Property<Guid>("RevisionsId")
                        .HasColumnType("uuid");

                    b.HasKey("CategoriesId", "RevisionsId");

                    b.HasIndex("RevisionsId");

                    b.ToTable("CategoryRevision");
                });

            modelBuilder.Entity("Domain.Entities.Article", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<Guid?>("CurrentRevisionId")
                        .HasColumnType("uuid");

                    b.Property<string>("RedirectArticleId")
                        .HasColumnType("character varying(512)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("CurrentRevisionId")
                        .IsUnique();

                    b.HasIndex("RedirectArticleId");

                    b.HasIndex("Title");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Title"), "GIST");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex("Title"), new[] { "gist_trgm_ops" });

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ParentId")
                        .HasColumnType("character varying(512)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Domain.Entities.Navigation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Icon")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.Property<string>("Uri")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<int>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Navigations");
                });

            modelBuilder.Entity("Domain.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5744b9a3-2256-4f69-b6ac-4d8c164632c9"),
                            Name = "ArticleCreate"
                        },
                        new
                        {
                            Id = new Guid("861b96a8-9a42-45e4-b1c2-733ef85bc2d6"),
                            Name = "ArticleEdit"
                        },
                        new
                        {
                            Id = new Guid("7d9bbc60-f1c8-4762-ac1d-edac85f22b48"),
                            Name = "ArticleSetRedirect"
                        },
                        new
                        {
                            Id = new Guid("27c68a58-6f91-41a2-bd36-c4dda391f309"),
                            Name = "ArticleSeePendingRevisions"
                        },
                        new
                        {
                            Id = new Guid("76da2206-a875-47b2-86bb-27ecd0e9f4b9"),
                            Name = "ArticleReviewRevision"
                        },
                        new
                        {
                            Id = new Guid("e4d1aff3-8bc1-4730-b95d-438f1fde6aeb"),
                            Name = "ArticleDelete"
                        },
                        new
                        {
                            Id = new Guid("95571fee-1313-41de-adfe-6b65fe53760b"),
                            Name = "CategoryCreate"
                        },
                        new
                        {
                            Id = new Guid("fa7c5b48-0fb4-4757-96a7-014b00fdd78b"),
                            Name = "CategoryDelete"
                        },
                        new
                        {
                            Id = new Guid("eced433f-b27c-4c6e-af41-d2231fb40f03"),
                            Name = "NavigationsUpdateTree"
                        },
                        new
                        {
                            Id = new Guid("d7a48d11-2a3b-4896-8927-e37a6d1d7dd0"),
                            Name = "UserRename"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ReviewTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ReviewerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RevisionId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("RevisionId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Domain.Entities.Revision", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ArticleId")
                        .IsRequired()
                        .HasColumnType("character varying(512)");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<string>("AuthorsNote")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("LatestReviewId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("LatestReviewId")
                        .IsUnique();

                    b.ToTable("Revisions");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ca2cfe04-24ed-42d0-9237-6d5ed7885063"),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("e1d0ad14-fb96-4488-bf64-8aab2d1ef43d"),
                            Name = "Editor"
                        },
                        new
                        {
                            Id = new Guid("3a7651c5-2cf1-4ed6-9866-c6bac6e8f6dd"),
                            Name = "User"
                        },
                        new
                        {
                            Id = new Guid("2afacdee-55a4-4e23-9f66-2ca5a5af9751"),
                            Name = "Lurker"
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId");

                    b.HasIndex("Name");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PermissionRole", b =>
                {
                    b.Property<Guid>("PermissionsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RolesId")
                        .HasColumnType("uuid");

                    b.HasKey("PermissionsId", "RolesId");

                    b.HasIndex("RolesId");

                    b.ToTable("RolePermission", (string)null);

                    b.HasData(
                        new
                        {
                            PermissionsId = new Guid("5744b9a3-2256-4f69-b6ac-4d8c164632c9"),
                            RolesId = new Guid("ca2cfe04-24ed-42d0-9237-6d5ed7885063")
                        },
                        new
                        {
                            PermissionsId = new Guid("e4d1aff3-8bc1-4730-b95d-438f1fde6aeb"),
                            RolesId = new Guid("ca2cfe04-24ed-42d0-9237-6d5ed7885063")
                        },
                        new
                        {
                            PermissionsId = new Guid("861b96a8-9a42-45e4-b1c2-733ef85bc2d6"),
                            RolesId = new Guid("ca2cfe04-24ed-42d0-9237-6d5ed7885063")
                        },
                        new
                        {
                            PermissionsId = new Guid("27c68a58-6f91-41a2-bd36-c4dda391f309"),
                            RolesId = new Guid("ca2cfe04-24ed-42d0-9237-6d5ed7885063")
                        },
                        new
                        {
                            PermissionsId = new Guid("76da2206-a875-47b2-86bb-27ecd0e9f4b9"),
                            RolesId = new Guid("ca2cfe04-24ed-42d0-9237-6d5ed7885063")
                        },
                        new
                        {
                            PermissionsId = new Guid("7d9bbc60-f1c8-4762-ac1d-edac85f22b48"),
                            RolesId = new Guid("ca2cfe04-24ed-42d0-9237-6d5ed7885063")
                        },
                        new
                        {
                            PermissionsId = new Guid("95571fee-1313-41de-adfe-6b65fe53760b"),
                            RolesId = new Guid("ca2cfe04-24ed-42d0-9237-6d5ed7885063")
                        },
                        new
                        {
                            PermissionsId = new Guid("fa7c5b48-0fb4-4757-96a7-014b00fdd78b"),
                            RolesId = new Guid("ca2cfe04-24ed-42d0-9237-6d5ed7885063")
                        },
                        new
                        {
                            PermissionsId = new Guid("eced433f-b27c-4c6e-af41-d2231fb40f03"),
                            RolesId = new Guid("ca2cfe04-24ed-42d0-9237-6d5ed7885063")
                        },
                        new
                        {
                            PermissionsId = new Guid("d7a48d11-2a3b-4896-8927-e37a6d1d7dd0"),
                            RolesId = new Guid("ca2cfe04-24ed-42d0-9237-6d5ed7885063")
                        },
                        new
                        {
                            PermissionsId = new Guid("5744b9a3-2256-4f69-b6ac-4d8c164632c9"),
                            RolesId = new Guid("e1d0ad14-fb96-4488-bf64-8aab2d1ef43d")
                        },
                        new
                        {
                            PermissionsId = new Guid("e4d1aff3-8bc1-4730-b95d-438f1fde6aeb"),
                            RolesId = new Guid("e1d0ad14-fb96-4488-bf64-8aab2d1ef43d")
                        },
                        new
                        {
                            PermissionsId = new Guid("861b96a8-9a42-45e4-b1c2-733ef85bc2d6"),
                            RolesId = new Guid("e1d0ad14-fb96-4488-bf64-8aab2d1ef43d")
                        },
                        new
                        {
                            PermissionsId = new Guid("27c68a58-6f91-41a2-bd36-c4dda391f309"),
                            RolesId = new Guid("e1d0ad14-fb96-4488-bf64-8aab2d1ef43d")
                        },
                        new
                        {
                            PermissionsId = new Guid("76da2206-a875-47b2-86bb-27ecd0e9f4b9"),
                            RolesId = new Guid("e1d0ad14-fb96-4488-bf64-8aab2d1ef43d")
                        },
                        new
                        {
                            PermissionsId = new Guid("7d9bbc60-f1c8-4762-ac1d-edac85f22b48"),
                            RolesId = new Guid("e1d0ad14-fb96-4488-bf64-8aab2d1ef43d")
                        },
                        new
                        {
                            PermissionsId = new Guid("95571fee-1313-41de-adfe-6b65fe53760b"),
                            RolesId = new Guid("e1d0ad14-fb96-4488-bf64-8aab2d1ef43d")
                        },
                        new
                        {
                            PermissionsId = new Guid("fa7c5b48-0fb4-4757-96a7-014b00fdd78b"),
                            RolesId = new Guid("e1d0ad14-fb96-4488-bf64-8aab2d1ef43d")
                        },
                        new
                        {
                            PermissionsId = new Guid("eced433f-b27c-4c6e-af41-d2231fb40f03"),
                            RolesId = new Guid("e1d0ad14-fb96-4488-bf64-8aab2d1ef43d")
                        },
                        new
                        {
                            PermissionsId = new Guid("5744b9a3-2256-4f69-b6ac-4d8c164632c9"),
                            RolesId = new Guid("3a7651c5-2cf1-4ed6-9866-c6bac6e8f6dd")
                        },
                        new
                        {
                            PermissionsId = new Guid("861b96a8-9a42-45e4-b1c2-733ef85bc2d6"),
                            RolesId = new Guid("3a7651c5-2cf1-4ed6-9866-c6bac6e8f6dd")
                        });
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<Guid>("RolesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RoleUser");
                });

            modelBuilder.Entity("CategoryRevision", b =>
                {
                    b.HasOne("Domain.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Revision", null)
                        .WithMany()
                        .HasForeignKey("RevisionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Article", b =>
                {
                    b.HasOne("Domain.Entities.Revision", "CurrentRevision")
                        .WithOne()
                        .HasForeignKey("Domain.Entities.Article", "CurrentRevisionId");

                    b.HasOne("Domain.Entities.Article", "RedirectArticle")
                        .WithMany()
                        .HasForeignKey("RedirectArticleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("CurrentRevision");

                    b.Navigation("RedirectArticle");
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.HasOne("Domain.Entities.Category", "Parent")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Domain.Entities.Navigation", b =>
                {
                    b.HasOne("Domain.Entities.Navigation", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Domain.Entities.Review", b =>
                {
                    b.HasOne("Domain.Entities.User", "Reviewer")
                        .WithMany()
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Revision", "Revision")
                        .WithMany("Reviews")
                        .HasForeignKey("RevisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reviewer");

                    b.Navigation("Revision");
                });

            modelBuilder.Entity("Domain.Entities.Revision", b =>
                {
                    b.HasOne("Domain.Entities.Article", "Article")
                        .WithMany("Revisions")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Review", "LatestReview")
                        .WithOne()
                        .HasForeignKey("Domain.Entities.Revision", "LatestReviewId");

                    b.Navigation("Article");

                    b.Navigation("Author");

                    b.Navigation("LatestReview");
                });

            modelBuilder.Entity("PermissionRole", b =>
                {
                    b.HasOne("Domain.Entities.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Article", b =>
                {
                    b.Navigation("Revisions");
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("Domain.Entities.Navigation", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("Domain.Entities.Revision", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
